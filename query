------------
-- Cursor --
-- Tujuan: Menampilkan nama user sesuai yang memiliki search_key di dalamnya.
DELIMITER //

CREATE PROCEDURE search_user_by_keyword(IN search_key VARCHAR(100))
BEGIN
  DECLARE done INT DEFAULT 0;
  DECLARE user_name VARCHAR(100);
  DECLARE jumlah_data INT;
  DECLARE output TEXT DEFAULT '';

  DECLARE user_cursor CURSOR FOR
  SELECT nama_lengkap
  FROM user
  WHERE nama_lengkap LIKE CONCAT('%', search_key, '%');

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SELECT COUNT(*) INTO jumlah_data
  FROM user
  WHERE nama_lengkap LIKE CONCAT('%', search_key, '%');

  IF jumlah_data > 0 THEN
    SET output = CONCAT(jumlah_data, ' Data Found\n\n');

    OPEN user_cursor;

    loop1: LOOP
      FETCH user_cursor INTO user_name;
      IF done THEN
        LEAVE loop1; 
      END IF;
      SET output = CONCAT(output, user_name, '\n');
    END LOOP;

    CLOSE user_cursor;

    SELECT output AS 'Search Result';
  ELSE
    SELECT 'No Data Found' AS 'Search Result';
  END IF;

END//

DELIMITER ;

CALL search_user_by_keyword('A');
-- DROP PROCEDURE search_user_by_keyword;










---------------------------------------
-- Select (Group By, Join, Subquery) --
-- Tujuan: Menampilkan total donasi yang terkumpul untuk setiap program dan informasi program terkait.
SELECT p.nama_program, 
       SUM(d.jumlah_donasi) AS total_donasi
FROM donasi d
JOIN program p ON d.id_program = p.id_program
GROUP BY p.nama_program;









---------------------------------
-- Windows (Analytic Function) --
-- Tujuan: Menampilkan jumlah donasi yang diterima setiap bulan beserta total kumulatif donasi per bulan.
WITH bulan_series AS (
    SELECT 1 AS bulan
    UNION ALL
    SELECT 2
    UNION ALL
    SELECT 3
    UNION ALL
    SELECT 4
    UNION ALL
    SELECT 5
    UNION ALL
    SELECT 6
    UNION ALL
    SELECT 7
    UNION ALL
    SELECT 8
    UNION ALL
    SELECT 9
    UNION ALL
    SELECT 10
    UNION ALL
    SELECT 11
    UNION ALL
    SELECT 12
)
SELECT 
    b.bulan,
    COALESCE(SUM(d.jumlah_donasi), 0) AS total_donasi,
    COALESCE(SUM(d.jumlah_donasi) OVER (ORDER BY b.bulan ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS donasi_kumulatif
FROM bulan_series b
LEFT JOIN donasi d ON EXTRACT(MONTH FROM d.tgl_donasi) = b.bulan
GROUP BY b.bulan
ORDER BY b.bulan;


WITH RECURSIVE AllMonths AS (
    SELECT 
        DATE_FORMAT(MIN(tgl_donasi), '%Y-%m-01') AS month_date
    FROM donasi
    UNION ALL
    SELECT DATE_ADD(month_date, INTERVAL 1 MONTH)
    FROM AllMonths
    WHERE month_date < LAST_DAY((SELECT MAX(tgl_donasi) FROM donasi))
),
MonthlyDonations AS (
    SELECT 
        DATE_FORMAT(tgl_donasi, '%Y-%m') AS month,
        SUM(jumlah_donasi) AS total_donasi
    FROM donasi
    GROUP BY DATE_FORMAT(tgl_donasi, '%Y-%m')
)
SELECT 
    DATE_FORMAT(AllMonths.month_date, '%Y-%m') AS month,
    COALESCE(MonthlyDonations.total_donasi, 0) AS total_donasi,
    SUM(COALESCE(MonthlyDonations.total_donasi, 0)) OVER (ORDER BY AllMonths.month_date) AS cumulative_donations
FROM AllMonths
LEFT JOIN MonthlyDonations ON DATE_FORMAT(AllMonths.month_date, '%Y-%m') = MonthlyDonations.month
ORDER BY AllMonths.month_date;






------------------------------------
-- CTE (Common Table Expressions) --
WITH AnakUmur AS (
    SELECT 
        id_anak,
        nama_anak,
        tanggal_lahir_anak,
        jenis_kelamin_anak,
        pendidikan_anak,
        TIMESTAMPDIFF(YEAR, tanggal_lahir_anak, CURDATE()) AS umur
    FROM anak
)
SELECT * FROM AnakUmur
ORDER BY umur ASC;

WITH AnakUmur AS (
    SELECT 
        id_anak,
        nama_anak,
        tanggal_lahir_anak,
        jenis_kelamin_anak,
        pendidikan_anak,
        TIMESTAMPDIFF(YEAR, tanggal_lahir_anak, CURDATE()) AS umur
    FROM anak
)
SELECT * FROM AnakUmur
ORDER BY umur DESC;


-------------
-- Trigger --

















----------------------
-- Stored Procedure --
-- Tujuan: Menampilkan total donasi yang diterima oleh setiap pengguna untuk program tertentu.
DELIMITER //

CREATE PROCEDURE TotalDonasiPerUser(IN id_program INT)
BEGIN
    SELECT u.nama_lengkap, 
           SUM(d.jumlah_donasi) AS total_donasi
    FROM donasi d
    JOIN user u ON d.id_user = u.id_user
    WHERE d.id_program = id_program
    GROUP BY u.id_user
    ORDER BY total_donasi DESC;
END//

DELIMITER ;

CALL TotalDonasiPerUser(2);
DROP PROCEDURE TotalDonasiPerUser;








---------------------
-- Stored Function --
















----------
-- View --
-- Tujuan: Menampilkan laporan donasi bulanan untuk setiap program.
CREATE VIEW DonasiBulanan AS
SELECT 
    p.nama_program,
    EXTRACT(MONTH FROM d.tgl_donasi) AS bulan,
    SUM(d.jumlah_donasi) AS total_donasi
FROM donasi d
JOIN program p ON d.id_program = p.id_program
GROUP BY p.nama_program, EXTRACT(MONTH FROM d.tgl_donasi);

-- Untuk melihat data dari view
SELECT * FROM DonasiBulanan;




