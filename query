------------
-- Cursor --
-- Tujuan: Menampilkan nama user sesuai yang memiliki search_key di dalamnya.
DELIMITER //

CREATE PROCEDURE search_user_by_keyword(IN search_key VARCHAR(100))
BEGIN
  DECLARE done INT DEFAULT 0;
  DECLARE user_name VARCHAR(100);
  DECLARE jumlah_data INT;
  DECLARE output TEXT DEFAULT '';

  DECLARE user_cursor CURSOR FOR
  SELECT nama_lengkap
  FROM user
  WHERE nama_lengkap LIKE CONCAT('%', search_key, '%');

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SELECT COUNT(*) INTO jumlah_data
  FROM user
  WHERE nama_lengkap LIKE CONCAT('%', search_key, '%');

  IF jumlah_data > 0 THEN
    SET output = CONCAT(jumlah_data, ' Data Found\n\n');

    OPEN user_cursor;

    loop1: LOOP
      FETCH user_cursor INTO user_name;
      IF done THEN
        LEAVE loop1; 
      END IF;
      SET output = CONCAT(output, user_name, '\n');
    END LOOP;

    CLOSE user_cursor;

    SELECT output AS 'Search Result';
  ELSE
    SELECT 'No Data Found' AS 'Search Result';
  END IF;

END//

DELIMITER ;

CALL search_user_by_keyword('A');
-- DROP PROCEDURE search_user_by_keyword;










---------------------------------------
-- Select (Group By, Join, Subquery) --
-- Tujuan: Menampilkan total donasi yang terkumpul untuk setiap program dan informasi program terkait.
SELECT p.nama_program, 
       SUM(d.jumlah_donasi) AS total_donasi
FROM donasi d
JOIN program p ON d.id_program = p.id_program
GROUP BY p.nama_program;








---------------------------------
-- Windows (Analytic Function) --
-- Tujuan: Menampilkan jumlah donasi yang diterima setiap bulan beserta total kumulatif donasi per bulan.
WITH bulan_series AS (
    SELECT 1 AS bulan
    UNION ALL
    SELECT 2
    UNION ALL
    SELECT 3
    UNION ALL
    SELECT 4
    UNION ALL
    SELECT 5
    UNION ALL
    SELECT 6
    UNION ALL
    SELECT 7
    UNION ALL
    SELECT 8
    UNION ALL
    SELECT 9
    UNION ALL
    SELECT 10
    UNION ALL
    SELECT 11
    UNION ALL
    SELECT 12
),
donasi_per_bulan AS (
    SELECT 
        EXTRACT(MONTH FROM d.tgl_donasi) AS bulan,
        SUM(d.jumlah_donasi) AS total_donasi
    FROM donasi d
    GROUP BY EXTRACT(MONTH FROM d.tgl_donasi)
)
SELECT 
    b.bulan,
    COALESCE(dpb.total_donasi, 0) AS total_donasi,
    COALESCE(SUM(dpb.total_donasi) OVER (ORDER BY b.bulan ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS donasi_kumulatif
FROM bulan_series b
LEFT JOIN donasi_per_bulan dpb ON dpb.bulan = b.bulan
ORDER BY b.bulan;





------------------------------------
-- CTE (Common Table Expressions) --
-- Tujuan: Untuk mengsortir data dan mengselect semua data yang dibutuhkan.
WITH sorting_data AS (
    SELECT d.id_donasi, u.nama_lengkap AS nama_donatur, u.email, d.tgl_donasi, d.jumlah_donasi, p.nama_program
    FROM donasi d
    JOIN user u ON d.id_user = u.id_user
    JOIN program p ON d.id_program = p.id_program
)
SELECT * FROM sorting_data
ORDER BY d.id_donasi ASC;











-------------
-- Trigger --
-- Tujuan: Menambahkan log saat ada donasi baru yang tercatat.
CREATE TABLE donasi_log (
    id_log INT AUTO_INCREMENT PRIMARY KEY,
    id_donasi INT,
    tgl_donasi DATE,
    id_user INT,
    jumlah_donasi INT,
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--------------------
-- Trigger Part 2 --
DELIMITER //

CREATE TRIGGER log_donasi_insert
AFTER INSERT ON donasi
FOR EACH ROW
BEGIN
    INSERT INTO donasi_log (id_donasi, tgl_donasi, id_user, jumlah_donasi)
    VALUES (NEW.id_donasi, NEW.tgl_donasi, NEW.id_user, NEW.jumlah_donasi);
END//

DELIMITER ;


INSERT INTO donasi (jumlah_donasi, tgl_donasi, id_program, id_user)
VALUES
    (250000, '2024-12-11', 3, 2);
    

    (100000, '2024-12-11', 2, 5);











----------------------
-- Stored Procedure --
-- Tujuan: Menampilkan total donasi yang diterima oleh setiap pengguna untuk program tertentu.
DELIMITER //

CREATE PROCEDURE TotalDonasiPerUser(IN id_program INT)
BEGIN
    SELECT u.nama_lengkap, 
           SUM(d.jumlah_donasi) AS total_donasi
    FROM donasi d
    JOIN user u ON d.id_user = u.id_user
    WHERE d.id_program = id_program
    GROUP BY u.id_user
    ORDER BY total_donasi DESC;
END//

DELIMITER ;

CALL TotalDonasiPerUser(2);
DROP PROCEDURE TotalDonasiPerUser;








---------------------
-- Stored Function --
















----------
-- View --
-- Tujuan: Menampilkan laporan donasi bulanan untuk setiap program.
CREATE VIEW DonasiBulanan AS
SELECT 
    p.nama_program,
    EXTRACT(MONTH FROM d.tgl_donasi) AS bulan,
    SUM(d.jumlah_donasi) AS total_donasi
FROM donasi d
JOIN program p ON d.id_program = p.id_program
GROUP BY p.nama_program, EXTRACT(MONTH FROM d.tgl_donasi);

-- Untuk melihat data dari view
SELECT * FROM DonasiBulanan;